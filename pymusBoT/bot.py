from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import aiohttp
from bs4 import BeautifulSoup
import logging
import asyncio
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = '–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ês'
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
search_results = {}  # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
current_index = {}   # –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
search_type = {}     # –¢–∏–ø –ø–æ–∏—Å–∫–∞ (–≤–∏–¥–µ–æ –∏–ª–∏ –º—É–∑—ã–∫–∞)
cooldowns = {}       # –ö—É–ª–¥–∞—É–Ω –¥–ª—è —á–∞—Ç–æ–≤
search_history = {}  # –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
def update_search_history(chat_id: int, query: str):
    if chat_id not in search_history:
        search_history[chat_id] = []
    search_history[chat_id].append(query)
    # –û–≥—Ä–∞–Ω–∏—á–∏–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 –∑–∞–ø—Ä–æ—Å–∞–º–∏
    if len(search_history[chat_id]) > 10:
        search_history[chat_id] = search_history[chat_id][-10:]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_start_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å")],
            [KeyboardButton(text="üé• –ò—Å–∫–∞—Ç—å –≤–∏–¥–µ–æ –Ω–∞ Rutube")],
            [KeyboardButton(text="üéµ –ò—Å–∫–∞—Ç—å –º—É–∑—ã–∫—É –Ω–∞ Bandcamp")],
            [KeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤")],
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

def get_search_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ò—Å–∫–∞—Ç—å –µ—â—ë", callback_data="search_more"),
            InlineKeyboardButton(text="–ò—Å–∫–∞—Ç—å –¥—Ä—É–≥—É—é –ø–µ—Å–Ω—é", callback_data="new_search")
        ],
        [
            InlineKeyboardButton(text="–ù–µ —Ö–æ—á—É –∏—Å–∫–∞—Ç—å", callback_data="stop_search")
        ]
    ])

# –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ –Ω–∞ Rutube
async def search_video(query: str):
    url = f"https://rutube.ru/api/search/video/?query={query}"
    headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"}

    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as response:
            if response.status == 200:
                data = await response.json()
                return [(result.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"), f"https://rutube.ru/video/{result.get('id')}/") for result in data.get("results", [])]
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status}")
    return None

# –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏ –Ω–∞ Bandcamp
async def search_music(query: str):
    url = f"https://bandcamp.com/search?q={query}"
    headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"}

    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as response:
            if response.status == 200:
                soup = BeautifulSoup(await response.text(), 'html.parser')
                return [(result.find('div', {'class': 'heading'}).text.strip(), result.find('a')['href']) for result in soup.find_all('li', {'class': 'searchresult'})]
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status}")
    return None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –±–æ—Ç. –ù–∞–∂–º–∏ ¬´‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å¬ª, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –ø–æ–∏—Å–∫–∞.",
        reply_markup=get_start_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å"
@dp.message(lambda message: message.text == "‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å")
async def handle_start(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –∏—Å–∫–∞—Ç—å:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üé• –ò—Å–∫–∞—Ç—å –≤–∏–¥–µ–æ –Ω–∞ Rutube")],
                [KeyboardButton(text="üéµ –ò—Å–∫–∞—Ç—å –º—É–∑—ã–∫—É –Ω–∞ Bandcamp")]
            ],
            resize_keyboard=True
        )
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@dp.message(lambda message: message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def handle_main_menu(message: types.Message):
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=get_start_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞
@dp.message(lambda message: message.text in ["üé• –ò—Å–∫–∞—Ç—å –≤–∏–¥–µ–æ –Ω–∞ Rutube", "üéµ –ò—Å–∫–∞—Ç—å –º—É–∑—ã–∫—É –Ω–∞ Bandcamp"])
async def handle_search_type(message: types.Message):
    chat_id = message.chat.id
    search_type[chat_id] = "video" if message.text == "üé• –ò—Å–∫–∞—Ç—å –≤–∏–¥–µ–æ –Ω–∞ Rutube" else "music"
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –∏—Å–∫–∞—Ç—å {'–≤–∏–¥–µ–æ –Ω–∞ Rutube' if search_type[chat_id] == 'video' else '–º—É–∑—ã–∫—É –Ω–∞ Bandcamp'}. –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ü—Ä–∏–º–µ—Ä The Rolling Stones Paint It, Black:",
        reply_markup=get_start_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_message(message: types.Message):
    chat_id = message.chat.id
    query = message.text.strip()

    if query == "üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤":
        if chat_id in search_history and search_history[chat_id]:
            history_text = "–ù–µ–¥–∞–≤–Ω–æ –≤—ã –∏—Å–∫–∞–ª–∏:\n"
            for i, query in enumerate(search_history[chat_id], 1):
                history_text += f"{i}. {query}\n"
            await message.answer(history_text)
        else:
            await message.answer("–í—ã –µ—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ –∏—Å–∫–∞–ª–∏.")
        return

    if query == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await handle_main_menu(message)
        return

    if chat_id not in search_type:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–∏–ø –ø–æ–∏—Å–∫–∞: –≤–∏–¥–µ–æ –∏–ª–∏ –º—É–∑—ã–∫—É.", reply_markup=get_start_keyboard())
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏—é
    update_search_history(chat_id, query)

    results = await (search_video(query) if search_type[chat_id] == "video" else search_music(query))

    if not results:
        await message.answer("üòî –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.", reply_markup=get_start_keyboard())
        return

    search_results[chat_id] = results
    current_index[chat_id] = 0
    await send_result(chat_id, message)

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def send_result(chat_id: int, message: types.Message = None):
    if chat_id not in search_results or chat_id not in current_index:
        return

    result_name, result_link = search_results[chat_id][current_index[chat_id]]
    text = f"üéµ –ù–∞–π–¥–µ–Ω–æ: <b>{result_name}</b>\nüîó –°—Å—ã–ª–∫–∞: {result_link}"
    if message:
        await message.answer(text, parse_mode=ParseMode.HTML, reply_markup=get_search_keyboard())
    else:
        await bot.send_message(chat_id, text, parse_mode=ParseMode.HTML, reply_markup=get_search_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò—Å–∫–∞—Ç—å –µ—â—ë"
@dp.callback_query(lambda callback: callback.data == "search_more")
async def handle_search_more(callback: types.CallbackQuery):
    chat_id = callback.message.chat.id

    if chat_id in cooldowns and datetime.now() < cooldowns[chat_id]:
        await callback.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥...")
        return

    if chat_id not in search_results or chat_id not in current_index:
        await callback.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∏. –ù–∞—á–Ω–∏ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.")
        return

    current_index[chat_id] += 1
    if current_index[chat_id] >= len(search_results[chat_id]):
        await callback.answer("–ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç.")
        return

    cooldowns[chat_id] = datetime.now() + timedelta(seconds=5)
    await callback.answer("–ù–∞–∂–∏–º–∞–π—Ç–µ!")
    await send_result(chat_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò—Å–∫–∞—Ç—å –¥—Ä—É–≥—É—é –ø–µ—Å–Ω—é"
@dp.callback_query(lambda callback: callback.data == "new_search")
async def handle_new_search(callback: types.CallbackQuery):
    chat_id = callback.message.chat.id

    if chat_id in cooldowns and datetime.now() < cooldowns[chat_id]:
        await callback.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥...")
        return

    if chat_id in search_results:
        del search_results[chat_id]
    if chat_id in current_index:
        del current_index[chat_id]

    cooldowns[chat_id] = datetime.now() + timedelta(seconds=5)
    await callback.answer("–ù–∞–∂–∏–º–∞–π—Ç–µ!")
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞. –ü—Ä–∏–º–µ—Ä The Rolling Stones Paint It, Black:", reply_markup=get_start_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–µ —Ö–æ—á—É –∏—Å–∫–∞—Ç—å"
@dp.callback_query(lambda callback: callback.data == "stop_search")
async def handle_stop_search(callback: types.CallbackQuery):
    chat_id = callback.message.chat.id

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if chat_id in search_results:
        del search_results[chat_id]
    if chat_id in current_index:
        del current_index[chat_id]
    if chat_id in search_type:
        del search_type[chat_id]

    await callback.answer("–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω.")
    await callback.message.answer(
        "–•–æ—Ä–æ—à–æ, –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω. –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –∏—Å–∫–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â—ë, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ ¬´‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å¬ª.",
        reply_markup=get_start_keyboard()
    )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    try:
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    asyncio.run(main())
