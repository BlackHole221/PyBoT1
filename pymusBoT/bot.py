from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import aiohttp
from bs4 import BeautifulSoup
import logging
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = '–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def save_user_query(chat_id: int, query: str):
    if chat_id not in user_data:
        user_data[chat_id] = {"history": [], "results": [], "index": 0, "type": None}
    user_data[chat_id]["history"].append(query)
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 –∑–∞–ø—Ä–æ—Å–∞–º–∏
    if len(user_data[chat_id]["history"]) > 10:
        user_data[chat_id]["history"] = user_data[chat_id]["history"][-10:]

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ (—Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å")
def create_start_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å")]
        ],
        resize_keyboard=True
    )

# –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üé• –í–∏–¥–µ–æ –Ω–∞ Rutube"), KeyboardButton(text="üéµ –ú—É–∑—ã–∫–∞ –Ω–∞ Bandcamp")],
            [KeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è"), KeyboardButton(text="‚ùå –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")],
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
def create_menu_only_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
def create_search_buttons():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–ò—Å–∫–∞—Ç—å –µ—â—ë", callback_data="more"),
                InlineKeyboardButton(text="–ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new")
            ],
            [InlineKeyboardButton(text="–ó–∞–∫–æ–Ω—á–∏—Ç—å", callback_data="stop")]
        ]
    )

# –ü–æ–∏—Å–∫ –≤–∏–¥–µ–æ –Ω–∞ Rutube
async def find_videos(query: str):
    url = f"https://rutube.ru/api/search/video/?query={query}"
    headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"}

    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as response:
            if response.status == 200:
                data = await response.json()
                return [(item.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"), f"https://rutube.ru/video/{item.get('id')}/") for item in data.get("results", [])]
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status}")
    return []

# –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏ –Ω–∞ Bandcamp
async def find_music(query: str):
    url = f"https://bandcamp.com/search?q={query}"
    headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"}

    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as response:
            if response.status == 200:
                soup = BeautifulSoup(await response.text(), 'html.parser')
                return [(item.find('div', {'class': 'heading'}).text.strip(), item.find('a')['href']) for item in soup.find_all('li', {'class': 'searchresult'})]
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status}")
    return []

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_bot(message: types.Message):
    name = message.from_user.first_name
    username = message.from_user.username
    greeting = f"–ü—Ä–∏–≤–µ—Ç, {name}!" + (f" (@{username})" if username else "")
    await message.answer(greeting)
    await message.answer("–Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ –∏ –º—É–∑—ã–∫–∏. –ù–∞–∂–º–∏ ¬´‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å¬ª, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –ø–æ–∏—Å–∫–∞.)", reply_markup=create_start_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å"
@dp.message(lambda message: message.text == "‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å")
async def start_search(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –∏—Å–∫–∞—Ç—å:", reply_markup=create_main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
@dp.message(lambda message: message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def return_to_menu(message: types.Message):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=create_main_menu())



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞
@dp.message(lambda message: message.text in ["üé• –í–∏–¥–µ–æ –Ω–∞ Rutube", "üéµ –ú—É–∑—ã–∫–∞ –Ω–∞ Bandcamp"])
async def choose_search_type(message: types.Message):
    chat_id = message.chat.id
    if chat_id not in user_data:
        user_data[chat_id] = {"history": [], "results": [], "index": 0, "type": None}
    user_data[chat_id]["type"] = "video" if message.text == "üé• –í–∏–¥–µ–æ –Ω–∞ Rutube" else "music"
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –∏—Å–∫–∞—Ç—å {'–≤–∏–¥–µ–æ –Ω–∞ Rutube' if user_data[chat_id]['type'] == 'video' else '–º—É–∑—ã–∫—É –Ω–∞ Bandcamp'}. –í–≤–µ–¥–∏ –∑–∞–ø—Ä–æ—Å:",
        reply_markup=create_menu_only_keyboard()  # –¢–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def process_query(message: types.Message):
    chat_id = message.chat.id
    query = message.text.strip()

    if query == "üìú –ò—Å—Ç–æ—Ä–∏—è":
        if chat_id in user_data and user_data[chat_id]["history"]:
            history = "\n".join(f"{i}. {item}" for i, item in enumerate(user_data[chat_id]["history"], 1))
            await message.answer(f"–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤:\n{history}")
        else:
            await message.answer("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞.")
        return

    if query == "‚ùå –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é":
        if chat_id in user_data:
            user_data[chat_id]["history"] = []
            await message.answer("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—á–∏—â–µ–Ω–∞.", reply_markup=create_main_menu())
        else:
            await message.answer("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —É–∂–µ –ø—É—Å—Ç–∞.", reply_markup=create_main_menu())
        return

    if query == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await return_to_menu(message)
        return

    if chat_id not in user_data or not user_data[chat_id]["type"]:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–∏–ø –ø–æ–∏—Å–∫–∞.", reply_markup=create_main_menu())
        return

    save_user_query(chat_id, query)
    if user_data[chat_id]["type"] == "video":
        results = await find_videos(query)
    else:
        results = await find_music(query)

    if not results:
        await message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.", reply_markup=create_main_menu())
        return

    user_data[chat_id]["results"] = results
    user_data[chat_id]["index"] = 0
    await show_result(chat_id, message)

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def show_result(chat_id: int, message: types.Message = None):
    if chat_id not in user_data or not user_data[chat_id]["results"]:
        return

    result = user_data[chat_id]["results"][user_data[chat_id]["index"]]
    text = f"üéµ –ù–∞–π–¥–µ–Ω–æ: <b>{result[0]}</b>\nüîó –°—Å—ã–ª–∫–∞: {result[1]}"

    if message:
        await message.answer(text, parse_mode=ParseMode.HTML, reply_markup=create_search_buttons())
    else:
        await bot.send_message(chat_id, text, parse_mode=ParseMode.HTML, reply_markup=create_search_buttons())



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò—Å–∫–∞—Ç—å –µ—â—ë"
@dp.callback_query(lambda callback: callback.data == "more")
async def next_result(callback: types.CallbackQuery):
    chat_id = callback.message.chat.id

    if chat_id not in user_data or not user_data[chat_id]["results"]:
        await callback.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å—Ç–∞—Ä–µ–ª–∏. –ù–∞—á–Ω–∏ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.")
        return

    user_data[chat_id]["index"] += 1
    if user_data[chat_id]["index"] >= len(user_data[chat_id]["results"]):
        await callback.answer("–ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç.")
        return

    await callback.answer("–ó–∞–≥—Ä—É–∂–∞—é —Å–ª–µ–¥—É—é—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
    await show_result(chat_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–æ–≤—ã–π –ø–æ–∏—Å–∫"
@dp.callback_query(lambda callback: callback.data == "new")
async def new_search(callback: types.CallbackQuery):
    chat_id = callback.message.chat.id
    user_data[chat_id]["results"] = []
    user_data[chat_id]["index"] = 0
    await callback.answer("–ù–∞—á–Ω–∏ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.")
    await callback.message.answer("–í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:", reply_markup=create_main_menu())



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–∫–æ–Ω—á–∏—Ç—å"
@dp.callback_query(lambda callback: callback.data == "stop")
async def stop_search(callback: types.CallbackQuery):
    chat_id = callback.message.chat.id
    user_data[chat_id]["results"] = []
    user_data[chat_id]["index"] = 0
    await callback.answer("–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω.")
    await callback.message.answer("–ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í—ã–±–µ—Ä–∏ —á—Ç–æ - —Ç–æ: ", reply_markup=create_main_menu())





# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def run_bot():
    try:
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    asyncio.run(run_bot())
