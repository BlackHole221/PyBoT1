from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import aiohttp
from bs4 import BeautifulSoup
import logging
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
BOT_TOKEN = '7761632211:AAHHq5P9SHI-FnZcqsckZ90mOL3ZbCZUL5s'
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
search_results = {}  # {user_id: [(track_name, track_link), ...]}
current_index = {}   # {user_id: index}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞—á–∞—Ç—å"
def get_start_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ù–∞—á–∞—Ç—å")]],
        resize_keyboard=True  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
    )

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–º
def get_search_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ò—Å–∫–∞—Ç—å –µ—â—ë", callback_data="search_more"),
            InlineKeyboardButton(text="–ò—Å–∫–∞—Ç—å –¥—Ä—É–≥—É—é –ø–µ—Å–Ω—é", callback_data="new_search")
        ]
    ])

# –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏ –Ω–∞ Bandcamp
async def search_music(query: str):
    url = f"https://bandcamp.com/search?q={query}"
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
    }

    try:
        logger.info(f"–ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}")
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers) as response:
                if response.status == 200:
                    html = await response.text()
                    soup = BeautifulSoup(html, 'html.parser')

                    # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
                    results = soup.find_all('li', {'class': 'searchresult'})
                    if results:
                        tracks = []
                        for result in results:
                            track_name = result.find('div', {'class': 'heading'}).text.strip()
                            track_link = result.find('a')['href']
                            tracks.append((track_name, track_link))
                        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(tracks)} —Ç—Ä–µ–∫–æ–≤.")
                        return tracks
                    else:
                        logger.warning("–¢—Ä–µ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")

    return None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def send_welcome(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –±–æ—Ç. –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –∏ —è –Ω–∞–π–¥—É –µ—ë –¥–ª—è —Ç–µ–±—è. –ü—Ä–∏–º–µ—Ä The Rolling Stones Paint It, Black",
        parse_mode=ParseMode.HTML,
        reply_markup=get_start_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_message(message: types.Message):
    query = message.text.strip()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª: {query}")

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–ù–∞—á–∞—Ç—å", –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    if query.lower() == "–Ω–∞—á–∞—Ç—å":
        await send_welcome(message)
        return

    # –ò—â–µ–º —Ç—Ä–µ–∫–∏
    tracks = await search_music(query)
    if not tracks:
        await message.answer(
            "üòî –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–µ—Å–Ω—é. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.",
            parse_mode=ParseMode.HTML,
            reply_markup=get_start_keyboard()
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π —Ç—Ä–µ–∫
    search_results[message.from_user.id] = tracks
    current_index[message.from_user.id] = 0
    await send_track(message.from_user.id, message)

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–µ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def send_track(user_id: int, message: types.Message = None):
    if user_id not in search_results or user_id not in current_index:
        logger.warning("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return

    track_name, track_link = search_results[user_id][current_index[user_id]]
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç—Ä–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {track_name}")

    if message:
        await message.answer(
            f"üéµ –ù–∞–π–¥–µ–Ω–∞ –ø–µ—Å–Ω—è: <b>{track_name}</b>\nüîó –°—Å—ã–ª–∫–∞: {track_link}",
            parse_mode=ParseMode.HTML,
            reply_markup=get_search_keyboard()
        )
    else:
        await bot.send_message(
            user_id,
            f"üéµ –ù–∞–π–¥–µ–Ω–∞ –ø–µ—Å–Ω—è: <b>{track_name}</b>\nüîó –°—Å—ã–ª–∫–∞: {track_link}",
            parse_mode=ParseMode.HTML,
            reply_markup=get_search_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò—Å–∫–∞—Ç—å –µ—â—ë"
@dp.callback_query(lambda callback: callback.data == "search_more")
async def handle_search_more(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª '–ò—Å–∫–∞—Ç—å –µ—â—ë'.")

    if user_id not in search_results or user_id not in current_index:
        await callback.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∏. –ù–∞—á–Ω–∏ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.")
        return

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç—Ä–µ–∫—É
    current_index[user_id] += 1
    if current_index[user_id] >= len(search_results[user_id]):
        await callback.answer("–ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç.")
        return

    await send_track(user_id)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò—Å–∫–∞—Ç—å –¥—Ä—É–≥—É—é –ø–µ—Å–Ω—é"
@dp.callback_query(lambda callback: callback.data == "new_search")
async def handle_new_search(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª '–ò—Å–∫–∞—Ç—å –¥—Ä—É–≥—É—é –ø–µ—Å–Ω—é'.")

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    if user_id in search_results:
        del search_results[user_id]
    if user_id in current_index:
        del current_index[user_id]

    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞:",
        parse_mode=ParseMode.HTML,
        reply_markup=get_start_keyboard()
    )
    await callback.answer()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    try:
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    asyncio.run(main())