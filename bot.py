from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import aiohttp
from bs4 import BeautifulSoup
import logging
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = '7680940661:AAHVMKA6wfF9TN2XIPoMV8bJO-34euXJ1os'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω!
ADMIN_IDS = [991357162]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_data = {}
broadcast_mode = False

# –ö–õ–ê–í–ò–ê–¢–£–†–´ 
def create_start_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å")]],
        resize_keyboard=True
    )

def create_main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üé• –í–∏–¥–µ–æ –Ω–∞ Rutube"), KeyboardButton(text="üéµ –ú—É–∑—ã–∫–∞ –Ω–∞ Bandcamp")],
            [KeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è"), KeyboardButton(text="‚ùå –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")],
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

def create_menu_only_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
        resize_keyboard=True
    )

def create_search_buttons():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–ò—Å–∫–∞—Ç—å –µ—â—ë", callback_data="more"),
                InlineKeyboardButton(text="–ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new")
            ],
            [InlineKeyboardButton(text="–ó–∞–∫–æ–Ω—á–∏—Ç—å", callback_data="stop")]
        ]
    )

def create_admin_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

# –ü–û–ò–°–ö
async def find_videos(query: str):
    url = f"https://rutube.ru/api/search/video/?query={query}"
    headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"}
    
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as response:
            if response.status == 200:
                data = await response.json()
                return [(item.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"), f"https://rutube.ru/video/{item.get('id')}/") for item in data.get("results", [])]
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status}")
    return []

async def find_music(query: str):
    url = f"https://bandcamp.com/search?q={query}"
    headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"}
    
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as response:
            if response.status == 200:
                soup = BeautifulSoup(await response.text(), 'html.parser')
                return [(item.find('div', {'class': 'heading'}).text.strip(), item.find('a')['href']) for item in soup.find_all('li', {'class': 'searchresult'})]
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status}")
    return []

#–û–ë–†–ê–ë–û–¢–ß–ò–ö–ò 
@dp.message(Command("start"))
async def start_bot(message: types.Message):
    name = message.from_user.first_name
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {name}!\n–Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ –∏ –º—É–∑—ã–∫–∏. –ù–∞–∂–º–∏ ¬´‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å¬ª", reply_markup=create_start_keyboard())

@dp.message(Command("admin"))
async def admin_panel(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    await message.answer("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=create_admin_keyboard())

@dp.message(lambda message: message.text == "‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å")
async def start_search(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:", reply_markup=create_main_menu())

@dp.message(lambda message: message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def return_to_menu(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=create_main_menu())

@dp.message(lambda message: message.text in ["üé• –í–∏–¥–µ–æ –Ω–∞ Rutube", "üéµ –ú—É–∑—ã–∫–∞ –Ω–∞ Bandcamp"])
async def choose_search_type(message: types.Message):
    chat_id = message.chat.id
    user_data[chat_id] = {"history": [], "results": [], "index": 0, "type": None}
    user_data[chat_id]["type"] = "video" if message.text == "üé• –í–∏–¥–µ–æ –Ω–∞ Rutube" else "music"
    await message.answer(f"–ò—â–µ–º {'–≤–∏–¥–µ–æ' if user_data[chat_id]['type'] == 'video' else '–º—É–∑—ã–∫—É'}. –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å:", reply_markup=create_menu_only_keyboard())

@dp.message(lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    await message.answer(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_data)}")

@dp.message(lambda message: message.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
async def start_broadcast(message: types.Message):
    global broadcast_mode
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    broadcast_mode = True
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")

@dp.message(lambda message: message.text == "üîô –ù–∞–∑–∞–¥")
async def admin_back(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=create_main_menu())

@dp.message()
async def process_query(message: types.Message):
    global broadcast_mode
    chat_id = message.chat.id
    text = message.text.strip()

    # –†–µ–∂–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏
    if broadcast_mode and message.from_user.id in ADMIN_IDS:
        broadcast_mode = False
        success = 0
        for user_id in user_data:
            try:
                await bot.send_message(user_id, text)
                success += 1
            except:
                pass
        await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {success} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
        return

    # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
    if text == "üìú –ò—Å—Ç–æ—Ä–∏—è":
        history = "\n".join(user_data.get(chat_id, {}).get("history", []))
        await message.answer(f"üìñ –ò—Å—Ç–æ—Ä–∏—è:\n{history or '–ü—É—Å—Ç–æ'}")
    
    elif text == "‚ùå –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é":
        user_data[chat_id] = {"history": [], "results": [], "index": 0, "type": None}
        await message.answer("üóë –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞")
    
    elif chat_id in user_data and user_data[chat_id].get("type"):
        # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        user_data[chat_id]["history"].append(text)
        results = await (find_videos(text) if user_data[chat_id]["type"] == "video" else find_music(text))
        
        if results:
            user_data[chat_id]["results"] = results
            user_data[chat_id]["index"] = 0
            await show_result(chat_id, message)
        else:
            await message.answer("üòû –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    else:
        await message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞")

#–í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò 
async def show_result(chat_id: int, message: types.Message = None):
    result = user_data[chat_id]["results"][user_data[chat_id]["index"]]
    text = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç:\n<b>{result[0]}</b>\nüåê –°—Å—ã–ª–∫–∞: {result[1]}"
    await (message.answer if message else bot.send_message)(chat_id, text, parse_mode=ParseMode.HTML, reply_markup=create_search_buttons())

@dp.callback_query(lambda c: c.data in ["more", "new", "stop"])
async def handle_callbacks(callback: types.CallbackQuery):
    chat_id = callback.message.chat.id
    data = callback.data
    
    if data == "more":
        user_data[chat_id]["index"] += 1
        if user_data[chat_id]["index"] >= len(user_data[chat_id]["results"]):
            await callback.answer("‚ùå –ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç")
            return
        await show_result(chat_id)
    
    elif data == "new":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:")
    
    elif data == "stop":
        user_data[chat_id] = {"history": [], "results": [], "index": 0, "type": None}
        await callback.message.answer("–ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", reply_markup=create_main_menu())
    
    await callback.answer()

#–ó–ê–ü–£–°–ö
async def run_bot():
    try:
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û–®–ò–ë–ö–ê: {e}")

if __name__ == '__main__':
    asyncio.run(run_bot())
